
# check for non-parametric options
# returns number of params
function _oscap_noarg {
    case "$1" in
      --definitions|--syschar|--results|--schematron|-f|--force|-q|--quiet|--oval-results) return 0 ;;
      --version|--help|-V|-h) return 256 ;; # stop cmdline processing
      *) return 1 ;;
    esac
}

function _oscap {

	# commands for individual modules
    local -A cmds=()
    cmds[oscap]="oval xccdf cpe cvss"
    cmds[oscap:oval]="collect eval analyse validate-xml generate"
    cmds[oscap:oval:generate]="report"
    cmds[oscap:cvss]="score describe"
    cmds[oscap:xccdf]="eval resolve validate-xml export-oval-variables generate"
    cmds[oscap:xccdf:generate]="report guide"
    cmds[oscap:cpe]="check match"

    # command options
    local -A opts=()
	opts[oscap]="--version --quiet --help -V -q -h"
    opts[oscap:oval:validate-xml]="--version --definitions --variables --syschar --results --directives --schematron"
    opts[oscap:oval:eval]="--id --variables --directives --results --report --skip-valid"
    opts[oscap:oval:analyse]="--variables --directives"
    opts[oscap:oval:collect]="--variables"
    opts[oscap:oval:generate:report]="-o --output"
    opts[oscap:xccdf:eval]="--skip-valid --profile --results --report --oval-results --export-variables"
    opts[oscap:xccdf:validate-xml]=""
    opts[oscap:xccdf:export-oval-variables]="--profile"
    opts[oscap:xccdf:resolve]="-o --output -f --force"
    opts[oscap:xccdf:generate]="--profile --format"
    opts[oscap:xccdf:generate:report]="-o --output -i --result-id --show --profile --format --oval-template"
    opts[oscap:xccdf:generate:guide]="-o --output --hide-profile-info --profile --format"
    opts[oscap:xccdf:generate:fix]="-o --output --template --profile --result-id --profile"
    opts[oscap:xccdf:generate:custom]="-o --output --stylesheet"
    opts[oscap:cvss:score]=""
    opts[oscap:cvss:describe]=""

    # local variables
	local std cmd i prev
	local c=1
	local cur="`_get_cword`"
	local prog="${COMP_WORDS[0]}"
    local modpath='oscap'
	_split_longopt || prev="${COMP_WORDS[$COMP_CWORD-1]}"

    # get module path
	while [ $c -lt $COMP_CWORD ]; do
		i="${COMP_WORDS[c]}"
		case "$i" in
			# TODO handle generic switches
			-*) _oscap_noarg "$i"; c=$((c + $?)) ;;
			*) modpath="$modpath:$i" ;;
		esac
		c=$((c + 1))
	done

	if [ "x${prev:0:1}" == "x-" ] && ! _oscap_noarg "$prev"; then
		# an option argument

        local cmd=${modpath##*:}

		case "$prev" in
			--AV|--AC|--AU|--CI|--II|--AI|--EX|--RL|--RC|--CD|--TD|--CR|--IR|--AR)
				COMPREPLY=( $(compgen -W "`$prog cvss $cmd -h | sed -r -n -e "s:^\s+$prev=\[(.+)\].+$:\1:gp" | tr '|' ' '`" -- ${cur}) ) ;;
			--results|-o|--output|--template|--oval-template) _filedir 'xml' ;;
            --report) _filedir 'html' ;;
            --format) COMPREPLY=( $(compgen -W "docbook html" -- ${cur}) ) ;;
		esac

	elif [ "x${cur:0:1}" == "x-" ] || [ "${modpath:0:11}" == 'oscap:cvss:' ]; then
		# an option
		COMPREPLY=( $(compgen -W "${opts[$modpath]}" -- ${cur}) )
    elif [ "x${cmds[$modpath]}" != 'x' ]; then
        # a submodule
		COMPREPLY=( $(compgen -W "${cmds[$modpath]}" -- ${cur}) )
	else
		# a positional argument

		case "$modpath" in
			oscap:cvss:*) ;; # no positional args for cvss
			*) _filedir 'xml' ;;
		esac

	fi

}

[ "${BASH_VERSINFO[0]}" -ge '4' ] && complete -F _oscap -o filenames oscap

