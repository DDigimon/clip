#!/usr/bin/python -tt
#
# livecd-creator : Creates Live CD based for Fedora.
#
# Copyright 2007, Red Hat  Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import os
import os.path
import sys
import time
import optparse

import imgcreate
imgcreate.live.MAYFLOWER_PATH = os.path.join(os.path.dirname(__file__), "mayflower")

import shutil
import subprocess
import tempfile

def create_minimized_image(destimg, srcimg):
    origmount = None
    newmount = None
    origimg = None
    newimg = None

    try:
        origmount = tempfile.mkdtemp(suffix=".mount", prefix=os.path.basename(srcimg))
        origimg = imgcreate.fs.LoopbackMount(srcimg, origmount)
        origimg.mount()
        du = subprocess.Popen(["/usr/bin/du", "-s", "--block-size=1", origmount], stdout=subprocess.PIPE)
        du.wait()
        newsize = int(int(du.stdout.read().split()[0]) * 1.01)
        newmount = tempfile.mkdtemp(suffix=".mount", prefix=os.path.basename(destimg))
        newimg = imgcreate.fs.SparseExtLoopbackMount(destimg, newmount, newsize, "ext3", 4096, "live")
        newimg.mount()
        os.system("sudo cp -a '%s'/* '%s'/" % (origmount, newmount))
        os.system("sudo chcon --reference='%s' '%s'" % (origmount, newmount))
    except Exception, e:
        print "Error creating minimized image: %s" % (str(e),)

    if newimg:
        newimg.cleanup()
        # resparse resizes the filesystem to the smallest possible and then resizes the filesystem image
        # but it is not working for some reason
        #newimg.resparse()
    if origimg:
        origimg.cleanup()
    if origmount:
        os.rmdir(origmount)
    if newmount:
        os.rmdir(newmount)

class CLIPLiveImageCreator(imgcreate.x86LiveImageCreator):

    def _configure_bootloader(self, isodir):
        """configure the boot loader"""
        os.makedirs(isodir + "/isolinux")

        menu = super(CLIPLiveImageCreator,self)._x86LiveImageCreator__find_syslinux_menu()

        super(CLIPLiveImageCreator,self)._x86LiveImageCreator__copy_syslinux_files(isodir, menu,
                                   super(CLIPLiveImageCreator,self)._x86LiveImageCreator__find_syslinux_mboot())

        boot_args = {}
        if self.extra_space:
            boot_args["extraspace"] = "extraspace=%s" % (self.extra_space,)
        else:
            boot_args["extraspace"] = ""

        isocfg = """default clip 
timeout 0
prompt 0
noescape 1
allowoptions 0

label clip 
  kernel vmlinuz0
  append initrd=initrd0.img root=CDLABEL=clip rootfstype=iso9660 ro quiet liveimg live_ram vga=0x317 mem=8704M nodmraid nompath %(extraspace)s
""" % boot_args

	# these functions have side effects we need, such as copying the kernel image :-/
        super(CLIPLiveImageCreator,self)._x86LiveImageCreator__get_image_stanzas(isodir)
        super(CLIPLiveImageCreator,self)._get_isolinux_stanzas(isodir)

        cfgf = open(isodir + "/isolinux/isolinux.cfg", "w")
        cfgf.write(isocfg)
        cfgf.close()

    def _stage_final_image(self):
        try:
            imgcreate.fs.makedirs(self._LiveImageCreatorBase__ensure_isodir() + "/LiveOS")

            if not self.skip_minimize:
                min_img = os.path.join(os.path.dirname(self._image), "ext3fs.min.img")
                create_minimized_image(min_img, self._image)
                os.rename(min_img, self._image)


            if self.skip_compression:
                shutil.move(self._image, self._LiveImageCreatorBase__isodir + "/LiveOS/ext3fs.img")
            else:
                imgcreate.fs.makedirs(os.path.join(os.path.dirname(self._image), "LiveOS"))
                shutil.move(self._image,
                            os.path.join(os.path.dirname(self._image),
                                         "LiveOS", "ext3fs.img"))
                imgcreate.fs.mksquashfs(os.path.dirname(self._image),
                           self._LiveImageCreatorBase__isodir + "/LiveOS/squashfs.img")

            self._LiveImageCreatorBase__create_iso(self._LiveImageCreatorBase__isodir)
        except Exception, e:
            print "Error creating livecd image: %s" % (str(e),)

        shutil.rmtree(self._LiveImageCreatorBase__isodir, ignore_errors = True)
        self._LiveImageCreatorBase__isodir = None


class Usage(Exception):
    def __init__(self, msg = None, no_error = False):
        Exception.__init__(self, msg, no_error)

def parse_options(args):
    parser = optparse.OptionParser()

    imgopt = optparse.OptionGroup(parser, "Image options",
                                  "These options define the created image.")
    imgopt.add_option("-c", "--config", type="string", dest="kscfg",
                      help="Path to kickstart config file")
    imgopt.add_option("-b", "--base-on", type="string", dest="base_on",
                      help="Add packages to an existing live CD iso9660 image.")
    imgopt.add_option("-f", "--fslabel", type="string", dest="fs_label",
                      help="File system label (default based on config name)")
    parser.add_option_group(imgopt)

    # options related to the config of your system
    sysopt = optparse.OptionGroup(parser, "System directory options",
                                  "These options define directories used on your system for creating the live image")
    sysopt.add_option("-t", "--tmpdir", type="string",
                      dest="tmpdir", default="/var/tmp",
                      help="Temporary directory to use (default: /var/tmp)")
    sysopt.add_option("", "--cache", type="string",
                      dest="cachedir", default=None,
                      help="Cache directory to use (default: private cache")
    parser.add_option_group(sysopt)

    # debug options not recommended for "production" images
    # Start a shell in the chroot for post-configuration.
    parser.add_option("-l", "--shell", action="store_true", dest="give_shell",
                      help=optparse.SUPPRESS_HELP)
    # Don't compress the image.
    parser.add_option("-s", "--skip-compression", action="store_true", dest="skip_compression",
                      help=optparse.SUPPRESS_HELP)
    parser.add_option("", "--skip-minimize", action="store_true", dest="skip_minimize",
                      help=optparse.SUPPRESS_HELP)
    parser.add_option("", "--extra-space", action="store", dest="extra_space", type="int", default=0,
                      help=optparse.SUPPRESS_HELP)

    (options, args) = parser.parse_args()
    if not options.kscfg or not os.path.isfile(options.kscfg):
        raise Usage("Kickstart config '%s' does not exist" %(options.kscfg,))
    if options.base_on and not os.path.isfile(options.base_on):
        raise Usage("Live CD ISO '%s' does not exist" %(options.base_on,))
    if options.fs_label and len(options.fs_label) > imgcreate.FSLABEL_MAXLEN:
        raise Usage("CD labels are limited to 32 characters")

    return options

def main():
    try:
        options = parse_options(sys.argv[1:])
    except Usage, (msg, no_error):
        if no_error:
            out = sys.stdout
            ret = 0
        else:
            out = sys.stderr
            ret = 2
        if msg:
            print >> out, msg
        return ret

    if os.geteuid () != 0:
        print >> sys.stderr, "You must run livecd-creator as root"
        return 1

    if options.fs_label:
        fs_label = options.fs_label
        name = fs_label
    else:
        name = imgcreate.build_name(options.kscfg, "livecd-")

        fs_label = imgcreate.build_name(options.kscfg,
                                        "livecd-",
                                        maxlen = imgcreate.FSLABEL_MAXLEN)

        print "Using label '%s' and name '%s'" % (fs_label, name)

    ks = imgcreate.read_kickstart(options.kscfg)

    creator = CLIPLiveImageCreator(ks, name, fs_label)
    creator.tmpdir = options.tmpdir
    creator.skip_compression = options.skip_compression
    creator.skip_minimize = options.skip_minimize
    creator.extra_space = options.extra_space

    try:
        try:
            creator.mount(options.base_on, options.cachedir)
            creator.install()
            creator.configure()
            if options.give_shell:
                print "Launching shell. Exit to continue."
                print "----------------------------------"
                creator.launch_shell()
            creator.unmount()
            creator.package()
        except imgcreate.CreatorError, e:
            print >> sys.stderr, "Error creating Live CD : %s" % e
            return 1
    finally:
        creator.cleanup()

    return 0

if __name__ == "__main__":
    sys.exit(main())
